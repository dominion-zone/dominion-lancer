let effect @ { Eff, ? } = import! std.effect
let { read_file_to_string, read_dir ? } = import! lancer.effect.file_system
let { log, ? } = import! lancer.effect.logger
let { Reporting } = import! lancer.reporting
let { deserialize } = import! std.json.de
let { (<|), (<<) } = import! std.function
let { unwrap_ok, Result } = import! std.result
let { ObjectPtr, Object, ? } = import! lancer.sui.object
let { ObjectRef, ObjectArg, ? } = import! lancer.transaction.builder.types
let { RpcObjectPtr, to_object, ? } = import! lancer.rpc.object
let { wrap } = import! std.applicative
let { ? } = import! std.array
let { for } = import! std.traversable
let { parse } = import! lancer.parse
let { TypeTag, StructTag, ? } = import! lancer.sui.types
let { SuiAddress, ? } = import! lancer.sui.sui_address

let {
    TestCluster,
    initialize,
    commit_preparation,
    commit_demonstration,
    generate_keypair,
    execute_tx,
    get_object,
    get_coins,
    get_balance,
    add_object,
} = import! lancer.effect.test_cluster

let {
    u8,
    u16,
    u32,
    u64,
    bool,
    address,
    object_ref,
    publish_upgradeable,
    publish_immutable,
    move_call,
    pay,
} = import! lancer.effect.transaction_builder

do objects = read_dir "objects"
for objects <| \entry ->
    if entry.metadata.is_file then
        do data = read_file_to_string entry.path
        let obj : ObjectPtr = unwrap_ok <| deserialize data
        add_object obj
    else
        wrap ()

let sui_framework = unwrap_ok <| parse "0x0000000000000000000000000000000000000000000000000000000000000002"

let cetus = unwrap_ok <| parse "0xc6faf3703b0e8ba9ed06b7851134bbbe7565eb35ff823fd78432baa4cbeaa12e"
let global_config_id = unwrap_ok <| parse "0xdaa46292632c3c4d8f31f23ea0f9b36a28ff3677e9684980e4438403a67a3d8f"
let global_config_initial_shared_version = 1

let vsui_type: StructTag = {
    address = unwrap_ok <| parse "0x549e8b69270defbfafd4f94e17ec44cdbdd99820b33bda2278dea3b9a32d3f55",
    module = "cert",
    name = "CERT",
    type_params = [],
}
let sui_type: StructTag = {
    address = sui_framework,
    module = "sui",
    name = "Sui",
    type_params = [],
}
let vsui_sui_pool_id = unwrap_ok <| parse "0x6c545e78638c8c1db7a48b282bb8ca79da107993fcb185f75cedc1f5adb2f535"
let vsui_sui_pool_initial_shared_version = 34395748

initialize

do pool = get_object vsui_sui_pool_id
log <| show pool

do admin = generate_keypair
do hacker = generate_keypair

commit_preparation [hacker]

do r = execute_tx 500000000 hacker (
    /*
    do global_config_arg = object_ref <| SharedObject {
        id = global_config_id,
        initial_shared_version = global_config_initial_shared_version,
        mutable = False,
    }
    do pool_arg = object_ref <| SharedObject {
        id = vsui_sui_pool_id,
        initial_shared_version = vsui_sui_pool_initial_shared_version,
        mutable = True,
    }
    do tick_lower_arg = u32 0
    do tick_upper_arg = u32 1
    move_call cetus "pool" "open_position" [ Struct vsui_type, Struct sui_type ] [
        global_config_arg,
        pool_arg,
        tick_lower_arg,
        tick_upper_arg
    ]*/
    do pool_arg = object_ref <| SharedObject {
        id = vsui_sui_pool_id,
        initial_shared_version = vsui_sui_pool_initial_shared_version,
        mutable = True,
    }
    move_call cetus "pool" "current_tick_index" [ Struct vsui_type, Struct sui_type ] [
        pool_arg
    ]
)

commit_demonstration "" Public
