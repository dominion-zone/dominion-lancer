let effect @ { Eff, inject_rest, run_pure, ? } = import! std.effect
let prim = import! lancer.test_cluster.prim
let tc = import! lancer.test_cluster
let tw @ { TempWallet } = import! lancer.temp_wallet
let { Lift, run_lift, lift, ? } = import! std.effect.lift
let { (<|), (<<) } = import! std.function
let { wrap } = import! std.applicative
let { State, run_state, get, put } = import! std.effect.state
let r @ { Log, SystemLog, ? } = import! lancer.report
let io @ { IO } = import! std.io
let { Transaction } = import! lancer.transaction
let { TransactionBlockResponse } = import! lancer.rpc
let { SuiAddress } = import! lancer.sui.sui_address
let { StructTag } = import! lancer.sui.types
let { Coin } = import! lancer.rpc.types
let { Reporting } = import! lancer.reporting
let { TransactionBuilder, run_transaction_builder, ? } = import! lancer.effect.transaction_builder
let { Logger, log, ? } = import! lancer.effect.logger

type TestCluster r a =
    | GenerateKeypair : TestCluster r SuiAddress
    | ExecuteTx : forall x . Int -> SuiAddress -> Array SuiAddress
        -> Eff [| transaction_builder: TransactionBuilder | r |] x
        -> TestCluster r TransactionBlockResponse
    | GetCoins : StructTag -> SuiAddress -> TestCluster r (Array Coin)
    | GetBalance : StructTag -> SuiAddress -> TestCluster r Int
    | CommitPreparation : Array SuiAddress -> TestCluster r ()
    | CommitDemonstration : Reporting -> TestCluster r ()
    .. r

let generate_keypair : Eff [| test_cluster : TestCluster | r |] SuiAddress =
    Impure (convert_effect! test_cluster GenerateKeypair) Pure

let execute_tx gas_budget sender tx_building
    : forall x . Int
    -> SuiAddress
    -> Eff [| transaction_builder: TransactionBuilder | r |] x
    -> Eff [| test_cluster : TestCluster | r |] TransactionBlockResponse =
    let r : TestCluster r TransactionBlockResponse = ExecuteTx gas_budget sender [] tx_building
    Impure (convert_effect! test_cluster r) Pure

let get_coins coin_type owner
    : StructTag -> SuiAddress -> Eff [| test_cluster : TestCluster | r |] (Array Coin) =
    Impure (convert_effect! test_cluster (GetCoins coin_type owner)) Pure

let get_balance coin_type owner
    : StructTag -> SuiAddress -> Eff [| test_cluster : TestCluster | r |] Int =
    Impure (convert_effect! test_cluster (GetBalance coin_type owner)) Pure

let commit_preparation retaining_keys : Array SuiAddress -> Eff [| test_cluster : TestCluster | r |] () =
    Impure (convert_effect! test_cluster (CommitPreparation retaining_keys)) Pure

let commit_demonstration reporting
    : Reporting -> Eff [| test_cluster : TestCluster | r |] () =
    Impure (convert_effect! test_cluster (CommitDemonstration reporting)) Pure

#[inline(never)]
let extract_test_cluster x : [| test_cluster : TestCluster | r |] a -> TestCluster r a = convert_variant! x

#[derive(Show, Eq)]
type Stage =
    | Preparation
    | Demonstration
    | Finalized

let run_test_cluster cluster temp_wallet working_dir eff =
    let loop ve : Eff [|
            test_cluster: TestCluster,
            lift : Lift IO,
            state: State Stage,
            logger: Logger Log | r |] a
        -> Eff [|
            lift : Lift IO,
            state: State Stage,
            logger: Logger Log | r |] a =
        match ve with
        | Pure value -> wrap value
        | Impure e f ->
            match extract_test_cluster e with
            | GenerateKeypair ->
                do stage = get
                if stage /= Finalized then
                    do address = tw.generate_keypair temp_wallet
                    log <| System <| KeypairGenerated { address }
                    loop <| f address
                else
                    lift <| io.throw "Invalid state for generate keypair"
            | ExecuteTx gas_budget sender additional_signers transaction ->
                do stage = get
                if stage /= Finalized then
                    do transaction = run_transaction_builder working_dir transaction
                    do response = tc.execute_tx cluster temp_wallet transaction gas_budget sender additional_signers
                    log <| System <| TxExecuted { transaction, response }
                    loop <| f response
                else
                    lift <| io.throw "Invalid state for execute transaction"
            | GetCoins coin_type owner ->
                do coins = tc.get_coins cluster coin_type owner
                loop <| f coins
            | GetBalance coin_type owner ->
                do balance = tc.get_balance cluster coin_type owner
                loop <| f balance
            | CommitPreparation retaining_keys ->
                do stage = get
                if stage == Preparation then
                    do available_keys = tw.get_keys temp_wallet
                    tw.retain_keys temp_wallet retaining_keys
                    do live_objects = tc.get_all_live_objects cluster
                    put Demonstration
                    log <| System <| PreparationCommited { available_keys, live_objects }
                    loop <| f ()
                else
                    lift <| io.throw "Invalid state for commit preparation"
            | CommitDemonstration reporting ->
                do stage = get
                if stage == Demonstration then
                    do available_keys = tw.get_keys temp_wallet
                    do live_objects = tc.get_all_live_objects cluster
                    tc.stop cluster
                    put Finalized
                    log <| System <| DemonstrationCommited { reporting, available_keys, live_objects }
                    loop <| f ()
                else
                    lift <| io.throw "Invalid state for commit demonstration"
            | rest ->
                Impure (inject_rest rest) (loop << f)

    do { value, state } = run_state Preparation <| loop eff
    if state == Finalized then
        wrap value
    else
        lift <| io.throw "Test cluster not finalized"

{
    TestCluster,
    generate_keypair,
    execute_tx,
    get_coins,
    get_balance,
    commit_preparation,
    commit_demonstration,
    run_test_cluster
}
