let effect @ { Eff, inject_rest, run_pure, ? } = import! std.effect
let prim = import! lancer.test_cluster.prim
let tc = import! lancer.test_cluster
let tcbi @ { TestClusterBuilder } = import! lancer.test_cluster.builder
let tw @ { TempWallet } = import! lancer.temp_wallet
let { Lift, run_lift, lift, ? } = import! std.effect.lift
let { (<|), (<<) } = import! std.function
let { wrap } = import! std.applicative
let { State, run_state, get, put } = import! std.effect.state
let r @ { Log, SystemLog, ? } = import! lancer.report
let io @ { IO } = import! std.io
let { Transaction } = import! lancer.transaction
let { TransactionBlockResponse, inner } = import! lancer.rpc
let { SuiAddress } = import! lancer.sui.sui_address
let { StructTag } = import! lancer.sui.types
let { Coin } = import! lancer.rpc.types
let { Reporting } = import! lancer.reporting
let { TransactionBuilder, run_transaction_builder, ? } = import! lancer.effect.transaction_builder
let { Logger, log, ? } = import! lancer.effect.logger
let { ObjectPtr, Object ? } = import! lancer.sui.object


type TestCluster r a =
    | Initialize : TestCluster r ()
    | CommitPreparation : Array SuiAddress -> TestCluster r ()
    | CommitDemonstration : String -> Reporting -> TestCluster r ()
    | GenerateKeypair : TestCluster r SuiAddress
    | AddObject : ObjectPtr -> TestCluster r ()
    | ExecuteTx : forall x . Int -> SuiAddress -> Array SuiAddress
        -> Eff [| transaction_builder: TransactionBuilder | r |] x
        -> TestCluster r TransactionBlockResponse
    | GetObject : SuiAddress -> TestCluster r Object
    | GetCoins : StructTag -> SuiAddress -> TestCluster r (Array Coin)
    | GetBalance : StructTag -> SuiAddress -> TestCluster r Int
    .. r

let initialize : Eff [| test_cluster : TestCluster | r |] () =
    Impure (convert_effect! test_cluster Initialize) Pure

let commit_preparation retaining_keys : Array SuiAddress -> Eff [| test_cluster : TestCluster | r |] () =
    Impure (convert_effect! test_cluster (CommitPreparation retaining_keys)) Pure

let commit_demonstration description reporting
    : String -> Reporting -> Eff [| test_cluster : TestCluster | r |] () =
    Impure (convert_effect! test_cluster (CommitDemonstration description reporting)) Pure

let generate_keypair : Eff [| test_cluster : TestCluster | r |] SuiAddress =
    Impure (convert_effect! test_cluster GenerateKeypair) Pure

let add_object object : ObjectPtr -> Eff [| test_cluster : TestCluster | r |] () =
    Impure (convert_effect! test_cluster (AddObject object)) Pure

let execute_tx gas_budget sender tx_building
    : forall x . Int
    -> SuiAddress
    -> Eff [| transaction_builder: TransactionBuilder | r |] x
    -> Eff [| test_cluster : TestCluster | r |] TransactionBlockResponse =
    let r : TestCluster r TransactionBlockResponse = ExecuteTx gas_budget sender [] tx_building
    Impure (convert_effect! test_cluster r) Pure

let get_object id : SuiAddress -> Eff [| test_cluster : TestCluster | r |] Object =
    Impure (convert_effect! test_cluster (GetObject id)) Pure

let get_coins coin_type owner
    : StructTag -> SuiAddress -> Eff [| test_cluster : TestCluster | r |] (Array Coin) =
    Impure (convert_effect! test_cluster (GetCoins coin_type owner)) Pure

let get_balance coin_type owner
    : StructTag -> SuiAddress -> Eff [| test_cluster : TestCluster | r |] Int =
    Impure (convert_effect! test_cluster (GetBalance coin_type owner)) Pure

#[inline(never)]
let extract_test_cluster x : [| test_cluster : TestCluster | r |] a -> TestCluster r a = convert_variant! x

type Stage =
    | Initialization TestClusterBuilder
    | Preparation tc.TestCluster
    | Demonstration tc.TestCluster
    | Finalized

let get_cluster : Eff [| lift : Lift IO, state: State Stage | r |] tc.TestCluster =
    do stage = get
    match stage with
    | Initialization _ -> lift <| io.throw "Test cluster not initialized"
    | Preparation cluster -> wrap cluster
    | Demonstration cluster -> wrap cluster
    | Finalized -> lift <| io.throw "Test cluster already finalized"

let run_test_cluster builder temp_wallet working_dir eff =
    let loop ve : Eff [|
            test_cluster: TestCluster,
            lift : Lift IO,
            state: State Stage,
            logger: Logger Log | r |] a
        -> Eff [|
            lift : Lift IO,
            state: State Stage,
            logger: Logger Log | r |] a =
        match ve with
        | Pure value -> wrap value
        | Impure e f ->
            match extract_test_cluster e with
            | Initialize ->
                do state = get
                match state with
                | Initialization builder ->
                    lift <| io.println "Initialize test cluster"
                    do cluster = tcbi.build builder
                    put <| Preparation cluster
                    log <| System <| Initialized ()
                    loop <| f ()
                | _ ->
                    lift <| io.throw "Test cluster already initialized"
            | CommitPreparation retaining_keys ->
                lift <| io.println "Commit preparation"
                do stage = get
                match stage with
                | Preparation cluster ->
                    do available_keys = tw.get_keys temp_wallet
                    tw.retain_keys temp_wallet retaining_keys
                    do live_objects = tc.get_all_live_objects cluster
                    put <| Demonstration cluster
                    log <| System <| PreparationCommited { available_keys, live_objects }
                    loop <| f ()
                | _ ->
                    lift <| io.throw "Invalid state for commit preparation"
            | CommitDemonstration description reporting ->
                lift <| io.println "Commit demonstration"
                do stage = get
                match stage with
                | Demonstration cluster ->
                    do available_keys = tw.get_keys temp_wallet
                    do live_objects = tc.get_all_live_objects cluster
                    tc.stop cluster
                    put Finalized
                    log <| System <| DemonstrationCommited { reporting, available_keys, live_objects, description }
                    loop <| f ()
                | _ ->
                    lift <| io.throw "Invalid state for commit demonstration"
            | GenerateKeypair ->
                do stage = get
                match stage with
                | Finalized ->
                    lift <| io.throw "Invalid state for generate keypair"
                | _ ->
                    do address = tw.generate_keypair temp_wallet
                    log <| System <| KeypairGenerated { address }
                    loop <| f address
            | AddObject object ->
                do state = get
                match state with
                | Initialization builder ->
                    tcbi.add_object builder object
                    log <| System <| ObjectAdded object
                    loop <| f ()
                | _ ->
                    lift <| io.throw "Invalid state for add object"
            | ExecuteTx gas_budget sender additional_signers transaction ->
                do cluster = get_cluster
                do transaction = run_transaction_builder working_dir transaction
                do response = tc.execute_tx cluster temp_wallet transaction gas_budget sender additional_signers
                log <| System <| TxExecuted { transaction, response }
                loop <| f <| inner response
            | GetObject id ->
                do cluster = get_cluster
                do object = tc.get_object cluster id
                loop <| f object
            | GetCoins coin_type owner ->
                do cluster = get_cluster
                do coins = tc.get_coins cluster coin_type owner
                loop <| f coins
            | GetBalance coin_type owner ->
                do cluster = get_cluster
                do balance = tc.get_balance cluster coin_type owner
                loop <| f balance
            | rest ->
                Impure (inject_rest rest) (loop << f)

    do { value, state } = run_state (Initialization builder) <| loop eff
    match state with
    | Finalized ->
        wrap value
    | _ ->
        lift <| io.throw "Test cluster not finalized"

{
    TestCluster,
    initialize,
    commit_preparation,
    commit_demonstration,
    generate_keypair,
    add_object,
    execute_tx,
    get_object,
    get_coins,
    get_balance,
    run_test_cluster
}
