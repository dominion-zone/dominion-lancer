let effect @ { Eff, inject_rest, ? } = import! std.effect
let prim = import! lancer.test_cluster.prim
let tc = import! lancer.test_cluster
let tw @ { TempWallet } = import! lancer.temp_wallet
let { Lift, run_lift, lift, ? } = import! std.effect.lift
let { (<|), (<<) } = import! std.function
let { wrap } = import! std.applicative
let { State, eval_state, get, put } = import! std.effect.state
let io @ { IO} = import! std.io
let { Transaction } = import! lancer.transaction
let { TransactionBlockResponse } = import! lancer.rpc
let { SuiAddress } = import! lancer.sui.sui_address
let { StructTag } = import! lancer.sui.types
let { Coin } = import! lancer.rpc.types
let { Argument, ObjectRef, ObjectArg, ? } = import! lancer.transaction.builder.types
let { TypeTag } = import! lancer.sui.types
let tb = import! lancer.transaction.builder
let { for } = import! std.traversable
let { Compiler, run_compiler } = import! lancer.effect.compiler
let { Logger, log, ? } = import! lancer.effect.logger
let { Log, ? } = import! lancer.report

type TransactionBuilder r a =
    | U8 : Byte -> TransactionBuilder r Argument
    | U16 : Int -> TransactionBuilder r Argument
    | U32 : Int -> TransactionBuilder r Argument
    | U64 : Int -> TransactionBuilder r Argument
    | Bool : Bool -> TransactionBuilder r Argument
    | Address : SuiAddress -> TransactionBuilder r Argument
    | ObjectRef : ObjectArg -> TransactionBuilder r Argument
    | PublishUpgradeable : forall x . Eff [| compiler: Compiler | r |] x -> TransactionBuilder r Argument
    | PublishImmutable : forall x . Eff [| compiler: Compiler | r |] x -> TransactionBuilder r ()
    | MoveCall : SuiAddress -> String -> String -> Array TypeTag -> Array Argument -> TransactionBuilder r Argument
    | Pay : Array ObjectRef -> Array Int -> Array SuiAddress -> TransactionBuilder r ()
    .. r

let u8 value : Byte -> Eff [| transaction_builder : TransactionBuilder | r |] Argument =
    Impure (convert_effect! transaction_builder (U8 value)) Pure

let u16 value : Int -> Eff [| transaction_builder : TransactionBuilder | r |] Argument =
    Impure (convert_effect! transaction_builder (U16 value)) Pure

let u32 value : Int -> Eff [| transaction_builder : TransactionBuilder | r |] Argument =
    Impure (convert_effect! transaction_builder (U32 value)) Pure

let u64 value : Int -> Eff [| transaction_builder : TransactionBuilder | r |] Argument =
    Impure (convert_effect! transaction_builder (U64 value)) Pure

let bool value : Bool -> Eff [| transaction_builder : TransactionBuilder | r |] Argument =
    Impure (convert_effect! transaction_builder (Bool value)) Pure

let address value : SuiAddress -> Eff [| transaction_builder : TransactionBuilder | r |] Argument =
    Impure (convert_effect! transaction_builder (Address value)) Pure

let object_ref value : ObjectArg -> Eff [| transaction_builder : TransactionBuilder | r |] Argument =
    Impure (convert_effect! transaction_builder (ObjectRef value)) Pure

let publish_upgradeable package_builder
    : forall x . Eff [| compiler: Compiler | r |] x -> Eff [| transaction_builder : TransactionBuilder | r |] Argument =
    Impure (convert_effect! transaction_builder (PublishUpgradeable package_builder)) Pure

let publish_immutable package_builder
    : forall x . Eff [| compiler: Compiler | r |] x -> Eff [| transaction_builder : TransactionBuilder | r |] () =
    Impure (convert_effect! transaction_builder (PublishImmutable package_builder)) Pure

let move_call package module function type_args args
    : SuiAddress -> String -> String -> Array TypeTag -> Array Argument -> Eff [| transaction_builder : TransactionBuilder | r |] Argument =
    Impure (convert_effect! transaction_builder (MoveCall package module function type_args args)) Pure

let pay coins amounts recipients
    : Array ObjectRef -> Array Int -> Array SuiAddress -> Eff [| transaction_builder : TransactionBuilder | r |] () =
    Impure (convert_effect! transaction_builder (Pay coins amounts recipients)) Pure

#[inline(never)]
let extract_transaction_builder x : [| transaction_builder : TransactionBuilder | r |] a -> TransactionBuilder r a = convert_variant! x

let run_transaction_builder working_dir eff =
    do builder = tb.new ()
    let loop ve : Eff [|
            transaction_builder: TransactionBuilder,
            logger : Logger Log,
            lift : Lift IO | r |] a
        -> Eff [|
            logger : Logger Log,
            lift : Lift IO | r |] a =
        match ve with
        | Pure value -> wrap value
        | Impure e f ->
            match extract_transaction_builder e with
            | U8 value ->
                do arg = tb.u8 builder value
                loop <| f arg
            | U16 value ->
                do arg = tb.u16 builder value
                loop <| f arg
            | U32 value ->
                do arg = tb.u32 builder value
                loop <| f arg
            | U64 value ->
                do arg = tb.u64 builder value
                loop <| f arg
            | Bool value ->
                do arg = tb.bool builder value
                loop <| f arg
            | Address value ->
                do arg = tb.address builder value
                loop <| f arg
            | ObjectRef value ->
                do arg = tb.object_ref builder value
                loop <| f arg
            | PublishUpgradeable package_builder ->
                do { bytes, dep_ids } = run_compiler working_dir package_builder
                do arg = tb.publish_upgradeable builder bytes dep_ids
                loop <| f arg
            | PublishImmutable package_builder ->
                do { bytes, dep_ids } = run_compiler working_dir package_builder
                tb.publish_immutable builder bytes dep_ids
                loop <| f ()
            | MoveCall package module function type_args args ->
                for args <| \arg ->
                    if arg == GasCoin then
                        lift <| io.throw "GasCoin is not allowed in move_call"
                    else wrap ()
                do arg = tb.move_call builder package module function type_args args
                loop <| f arg
            | Pay coins amounts recipients ->
                tb.pay builder coins amounts recipients
                loop <| f ()
            | rest ->
                Impure (inject_rest rest) (loop << f)
    loop eff
    tb.finish builder

{
    TransactionBuilder,
    u8,
    u16,
    u32,
    u64,
    bool,
    address,
    object_ref,
    publish_upgradeable,
    publish_immutable,
    move_call,
    pay,
    run_transaction_builder
}
