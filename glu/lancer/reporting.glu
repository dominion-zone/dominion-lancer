let { SuiAddress, ? } = import! lancer.sui.sui_address
let { Serialize, ? } = import! std.json.ser
let { Result, ? } = import! std.result
let { ? } = import! std.unit
let { Value } = import! std.json

#[derive(Show, Serialize)]
type PartialReporting = {
    owned_by: Array SuiAddress,
    objects:  Array SuiAddress,
}

#[derive(Show, Serialize)]
type HidingReporting = {
    owned_by: Array SuiAddress,
    objects:  Array SuiAddress,
}

#[derive(Show)]
type Reporting =
    | Public
    | Partial PartialReporting
    | Hiding HidingReporting

let serialize_Reporting: Serialize Reporting = {
    serialize = \x ->
        match x with
        | Public -> Ok <| String "Public"
        | Partial p ->
            do inner = serialize_PartialReporting.serialize p
            Ok <| Array [String "Partial", inner]
        | Hiding p ->
            do inner = serialize_HidingReporting.serialize p
            Ok <| Array [String "Hiding", inner]
}

{
    Reporting,
    show_Reporting,
    serialize_Reporting,
}