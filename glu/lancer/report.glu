let { SuiAddress, ? } = import! lancer.sui.sui_address
let effect @ { Eff, ? } = import! std.effect
let io @ { IO, ? } = import! std.io
let { (<|), (<<) } = import! std.function
let { wrap } = import! std.applicative
let { Lift, run_lift, lift, ? } = import! std.effect.lift
let { Serialize, ? } = import! std.json.ser
let { Result, ? } = import! std.result
let { Show } = import! std.show
let { Reporting, ? } = import! lancer.reporting
let { Transaction, ? } = import! lancer.transaction
let { TransactionBlockResponsePtr, ? } = import! lancer.rpc
let { ObjectPtr, ? } = import! lancer.sui.object
let { Value } = import! std.json

#[derive(Show, Serialize)]
type KeypairGeneratedInfo = {
    address: SuiAddress,
}

#[derive(Show, Serialize)]
type TxExecutedInfo = {
    transaction: Transaction,
    response: TransactionBlockResponsePtr,
}

#[derive(Show, Serialize)]
type PreparationCommitedInfo = {
    available_keys: Array SuiAddress,
    live_objects: Array ObjectPtr,
}

#[derive(Show, Serialize)]
type DemonstrationCommitedInfo = {
    reporting: Reporting,
    available_keys: Array SuiAddress,
    live_objects: Array ObjectPtr,
    description: String,
}

#[derive(Show)]
type SystemLog =
    | KeypairGenerated KeypairGeneratedInfo
    | TxExecuted TxExecutedInfo
    | PreparationCommited PreparationCommitedInfo
    | DemonstrationCommited DemonstrationCommitedInfo
    | DirectoryCompiled String

let serialize_SystemLog: Serialize SystemLog = {
    serialize = \x ->
        match x with
        | KeypairGenerated info ->
            do inner = serialize_KeypairGeneratedInfo.serialize info
            Ok <| Array [String "KeypairGenerated", inner]
        | TxExecuted info ->
            do inner = serialize_TxExecutedInfo.serialize info
            Ok <| Array [String "TxExecuted", inner]
        | PreparationCommited info ->
            do inner = serialize_PreparationCommitedInfo.serialize info
            Ok <| Array [String "PreparationCommited", inner]
        | DemonstrationCommited info ->
            do inner = serialize_DemonstrationCommitedInfo.serialize info
            Ok <| Array [String "DemonstrationCommited", inner]
        | DirectoryCompiled dir ->
            Ok <| Array [String "DirectoryCompiled", String dir]
}

#[derive(Show)]
type Log =
    | System SystemLog
    | User String

let serialize_Log: Serialize Log = {
    serialize = \x ->
        match x with
        | System s ->
            do inner = serialize_SystemLog.serialize s
            Ok <| Array [String "System", inner]
        | User s ->
            Ok <| Array [String "User", String s]
}

{
    Log,
    SystemLog,

    show_Log,
    show_SystemLog,

    serialize_Log,
    serialize_SystemLog,
}