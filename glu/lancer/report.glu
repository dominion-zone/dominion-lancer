let { SuiAddress, ? } = import! lancer.sui.sui_address
let effect @ { Eff, ? } = import! std.effect
let io @ { IO, ? } = import! std.io
let { (<|), (<<) } = import! std.function
let { wrap } = import! std.applicative
let { Lift, run_lift, lift, ? } = import! std.effect.lift
let { Serialize, ? } = import! std.json.ser
let { Show } = import! std.show
let { Reporting, ? } = import! lancer.reporting
let { Transaction, ? } = import! lancer.transaction
let { TransactionBlockResponse, ? } = import! lancer.rpc
let { Object, ? } = import! lancer.sui.object

#[derive(Show, Serialize)]
type KeypairGeneratedInfo = {
    address: SuiAddress,
}

#[derive(Show, Serialize)]
type TxExecutedInfo = {
    transaction: Transaction,
    response: TransactionBlockResponse,
}

#[derive(Show, Serialize)]
type PreparationCommitedInfo = {
    available_keys: Array SuiAddress,
    live_objects: Array Object,
}

#[derive(Show, Serialize)]
type DemonstrationCommitedInfo = {
    reporting: Reporting,
    available_keys: Array SuiAddress,
    live_objects: Array Object,
}

#[derive(Show, Serialize)]
type SystemLog =
    | KeypairGenerated KeypairGeneratedInfo
    | TxExecuted TxExecutedInfo
    | PreparationCommited PreparationCommitedInfo
    | DemonstrationCommited DemonstrationCommitedInfo
    | DirectoryCompiled String

#[derive(Show, Serialize)]
type Log =
    | System SystemLog
    | User String

{
    Log,
    SystemLog,

    show_Log,
    show_SystemLog,

    serialize_Log,
    serialize_SystemLog,
}