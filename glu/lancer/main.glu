let { Result } = import! std.result
let effect @ { Eff, ? } = import! std.effect
let { Lift, run_lift, lift, ? } = import! std.effect.lift
let { error } = import! std.prim
let { wrap } = import! std.applicative
let tw @ { TempWallet } = import! lancer.temp_wallet
let io @ { IO, ? } = import! std.io
let { map } = import! std.functor
let { Log, ? } = import! lancer.report
let { run_logger, map_logs } = import! lancer.effect.logger
let { Show, ? } = import! std.show

let tcbi @ { TestClusterBuilder } = import! lancer.test_cluster.builder
let io @ { ? } = import! std.io

let { TestCluster, run_test_cluster } = import! lancer.effect.test_cluster
let { Lancer } = import! lancer.types

let run builder working_dir scenario : TestClusterBuilder -> String -> Lancer _ -> IO () =
    let scenario = map_logs (\x -> User x) scenario
    // Apply the test cluster effect
    let scenario =
        do test_cluster = tcbi.build builder
        do temp_wallet = tw.new ()
        run_test_cluster test_cluster temp_wallet working_dir scenario
    
    // Apply the logger effect
    let scenario = run_logger scenario
    // Run IO
    do { value = final_report, logs } = run_lift scenario
    io.println <| show logs

run