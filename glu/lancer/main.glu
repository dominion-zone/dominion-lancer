let { Result } = import! std.result
let effect @ { Eff, ? } = import! std.effect
let { Lift, run_lift, lift, ? } = import! std.effect.lift
let { error } = import! std.prim
let { wrap } = import! std.applicative
let tw @ { TempWallet } = import! lancer.temp_wallet
let io @ { IO, ? } = import! std.io
let { map } = import! std.functor
let { Log, ? } = import! lancer.report
let { exec_logger, map_logs } = import! lancer.effect.logger
let { Show, show, ? } = import! std.show
let { to_string, ? } = import! std.json.ser
let { unwrap_ok } = import! std.result
let { (<<), (<|) } = import! std.function

let tcbi @ { TestClusterBuilder } = import! lancer.test_cluster.builder

let { TestCluster, run_test_cluster } = import! lancer.effect.test_cluster
let { Lancer } = import! lancer.types

let { make_public_summary, ? } = import! lancer.summary

let run builder working_dir scenario : TestClusterBuilder -> String -> Lancer _ -> IO (String, Option String) =
    let scenario = map_logs (\x -> User x) scenario
    // Apply the test cluster effect
    let scenario =
        do test_cluster = tcbi.build builder
        do temp_wallet = tw.new ()
        run_test_cluster test_cluster temp_wallet working_dir scenario
    
    // Apply the logger effect
    let scenario = exec_logger scenario
    // Run IO
    do logs = run_lift scenario
    let public_summary = make_public_summary logs
    let logs = unwrap_ok <| to_string logs
    let public_summary = map (unwrap_ok << to_string) public_summary
    wrap (logs, public_summary)

run