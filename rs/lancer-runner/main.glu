let { Result } = import! std.result
let effect @ { Eff, ? } = import! std.effect
let { Lift, run_lift, lift, ? } = import! std.effect.lift
let { error } = import! std.prim
let { wrap } = import! std.applicative
let tw @ { TempWallet } = import! lancer.temp_wallet
let io @ { IO, ? } = import! std.io

let tcbi @ { TestClusterBuilder } = import! lancer.test_cluster.builder
// let { FinalReport } = import! lancer.test_cluster.report
let io @ { ? } = import! std.io

let { TestCluster, run_test_cluster } = import! lancer.effect.test_cluster
let { run_transaction_builder } = import! lancer.effect.transaction_builder
let { run_compiler } = import! lancer.effect.compiler
let { Lancer } = import! lancer

let run builder scenario : TestClusterBuilder -> Lancer _ -> IO () =
    // Apply the compiler effect
    let scenario = run_compiler scenario
    // Apply the transaction builder effect
    let scenario = run_transaction_builder scenario
    // Apply the test cluster effect
    let scenario =
        do test_cluster = tcbi.build builder
        do temp_wallet = tw.new ()
        run_test_cluster test_cluster temp_wallet scenario
    run_lift scenario
    io.println "Tested"

run