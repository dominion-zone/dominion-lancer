let { SuiAddress } = import! lancer.sui.sui_address
let effect @ { Eff, ? } = import! std.effect
let io @ { IO, ? } = import! std.io
let { (<|), (<<) } = import! std.function
let { wrap } = import! std.applicative
let { Lift, run_lift, lift, ? } = import! std.effect.lift

type PreparationReport = {
    sql: String,
    keys: Array SuiAddress,
}

type DemonstrationReport = {
    sql: String,
    keys: Array SuiAddress,
}

type FinalReport = {
    preparation: PreparationReport,
    demonstration: DemonstrationReport,
}

type ReportBuilder =
    | Nothing
    | Preparation PreparationReport
    | Final FinalReport

let build builder : ReportBuilder -> Eff [| lift : Lift IO | r |] FinalReport =
    match builder with
    | Nothing -> lift <| io.throw "Not prepared"
    | Preparation p -> lift <| io.throw "Not demonstrated"
    | Final r -> wrap r

/*
type ReportBuilder = {
    preparation: Option PreparationReport,
    demonstration:  Option DemonstrationReport,
}

let default_builder : ReportBuilder = {
    preparation = None,
    demonstration = None,
}

let put_preparation r p : ReportBuilder -> PreparationReport -> ReportBuilder = 
    {
        preparation = Some p,
        .. r
    }

let put_demonstration r d : ReportBuilder -> PreparationReport -> ReportBuilder = 
    {
        demonstration = Some d,
        .. r
    }

let finalize r : ReportBuilder -> FinalReport = 
    let preparation = unwrap (load r.preparation)
    let demonstration = unwrap (load r.demonstration)
    {
        preparation,
        demonstration,
    }
*/
{
    ReportBuilder,
    // default_builder,
    PreparationReport,
    DemonstrationReport,
    FinalReport,
    // put_preparation,
    // put_demonstration,
    build
}