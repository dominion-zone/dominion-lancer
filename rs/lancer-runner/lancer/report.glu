let { SuiAddress, ? } = import! lancer.sui.sui_address
let effect @ { Eff, ? } = import! std.effect
let io @ { IO, ? } = import! std.io
let { (<|), (<<) } = import! std.function
let { wrap } = import! std.applicative
let { Lift, run_lift, lift, ? } = import! std.effect.lift
let { Serialize, ? } = import! std.json.ser
let { Deserialize, ? } = import! std.json.de
let { Show } = import! std.show
let { Reporting, ? } = import! lancer.reporting

#[derive(Show, Serialize, Deserialize)]
type KeypairGeneratedInfo = {
    address: SuiAddress,
}

#[derive(Show, Serialize, Deserialize)]
type TxExecutedInfo = {
    dummy: Int,
}

#[derive(Show, Serialize, Deserialize)]
type PreparationCommitedInfo = {
    retaining_keys: Array SuiAddress,
}

#[derive(Show, Serialize, Deserialize)]
type DemonstrationCommitedInfo = {
    reporting: Reporting
}

#[derive(Show, Serialize, Deserialize)]
type SystemLog =
    | KeypairGenerated KeypairGeneratedInfo
    | TxExecuted TxExecutedInfo
    | PreparationCommited PreparationCommitedInfo
    | DemonstrationCommited DemonstrationCommitedInfo

#[derive(Show, Serialize, Deserialize)]
type Log =
    | System SystemLog
    | User String

#[derive(Show, Serialize, Deserialize)]
type PreparationReport = {
    sql: String,
    keys: Array SuiAddress,
}

#[derive(Show, Serialize, Deserialize)]
type DemonstrationReport = {
    sql: String,
    keys: Array SuiAddress,
}

#[derive(Show, Serialize, Deserialize)]
type FinalReport = {
    preparation: PreparationReport,
    demonstration: DemonstrationReport,
}

type ReportBuilder =
    | Nothing
    | Preparation PreparationReport
    | Final FinalReport

let build builder : ReportBuilder -> Eff [| lift : Lift IO | r |] FinalReport =
    match builder with
    | Nothing -> lift <| io.throw "Not prepared"
    | Preparation p -> lift <| io.throw "Not demonstrated"
    | Final r -> wrap r

{
    Log,
    SystemLog,
    ReportBuilder,
    PreparationReport,
    DemonstrationReport,
    FinalReport,
    build,

    show_Log,
    show_SystemLog,
    show_PreparationReport,
    show_DemonstrationReport,
    show_FinalReport,

    serialize_Log,
    serialize_SystemLog,
    serialize_PreparationReport,
    serialize_DemonstrationReport,
    serialize_FinalReport,

    deserialize_Log,
    deserialize_SystemLog,
    deserialize_PreparationReport,
    deserialize_DemonstrationReport,
    deserialize_FinalReport,
}