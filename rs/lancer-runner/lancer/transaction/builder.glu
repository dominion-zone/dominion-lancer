let prim @ { TransactionBuilder, new } = import! lancer.transaction.builder.prim
let { Transaction } = import! lancer.transaction
let types @ { Argument, ObjectRef, ObjectArg, ? } = import! lancer.transaction.builder.types
let { SuiAddress } = import! lancer.sui.sui_address
let { TypeTag } = import! lancer.sui.types
let effect @ { Eff, ? } = import! std.effect
let { Lift, run_lift, lift, ? } = import! std.effect.lift
let { (<|), (<<) } = import! std.function
let { Coin } = import! lancer.rpc.types

let new _ : () -> Eff [| lift : Lift IO | r |] TransactionBuilder = lift <| prim.new
let u8 builder : TransactionBuilder -> Byte -> Eff [| lift : Lift IO | r |] Argument =
    lift << prim.u8 builder
let u16 builder : TransactionBuilder -> Int -> Eff [| lift : Lift IO | r |] Argument =
    lift << prim.u16 builder
let u32 builder : TransactionBuilder -> Int -> Eff [| lift : Lift IO | r |] Argument =
    lift << prim.u32 builder
let u64 builder : TransactionBuilder -> Int -> Eff [| lift : Lift IO | r |] Argument =
    lift << prim.u64 builder
let bool builder : TransactionBuilder -> Bool -> Eff [| lift : Lift IO | r |] Argument =
    lift << prim.bool builder
let address builder : TransactionBuilder -> SuiAddress -> Eff [| lift : Lift IO | r |] Argument =
    lift << prim.address builder
let object_ref builder : TransactionBuilder -> ObjectArg -> Eff [| lift : Lift IO | r |] Argument =
    lift << prim.object_ref builder
let publish_upgradeable builder modules dep_ids
    : TransactionBuilder -> Array (Array Byte) -> Array SuiAddress -> Eff [| lift : Lift IO | r |] Argument =
    lift <| prim.publish_upgradeable builder modules dep_ids
let publish_immutable builder modules dep_ids
    : TransactionBuilder -> Array (Array Byte) -> Array SuiAddress -> Eff [| lift : Lift IO | r |] () =
    lift <| prim.publish_immutable builder modules dep_ids
let move_call builder package module function type_args args
    : TransactionBuilder -> SuiAddress -> String -> String -> Array TypeTag -> Array Argument -> Eff [| lift : Lift IO | r |] Argument =
    lift <| prim.move_call builder package module function type_args args
let pay builder coins amounts recipients
    : TransactionBuilder -> Array ObjectRef -> Array Int -> Array SuiAddress -> Eff [| lift : Lift IO | r |] () =
    lift <| prim.pay builder coins amounts recipients
let finish builder : TransactionBuilder -> Eff [| lift : Lift IO | r |] Transaction =
    lift <| prim.finish builder

{
    TransactionBuilder,
    new,
    u8,
    u16,
    u32,
    u64,
    bool,
    address,
    object_ref,
    publish_upgradeable,
    publish_immutable,
    move_call,
    pay,
    finish,
    ..
    types
}