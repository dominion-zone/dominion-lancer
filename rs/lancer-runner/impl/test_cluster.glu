let effect @ { Eff, ? } = import! std.effect
let prim = import! lancer.test_cluster.prim
let tc @ { TestCluster } = import! lancer.test_cluster
let temp_wallet @ { TempWallet } = import! lancer.temp_wallet
let { Lift, run_lift, lift, ? } = import! std.effect.lift
let { (<|), (<<) } = import! std.function
let { wrap } = import! std.applicative

let make cluster index wallet : prim.TestCluster -> Int -> TempWallet -> Eff [| lift : Lift IO | r |] TestCluster = 
    let execute_tx tx sender = 
        lift <| prim.execute_tx cluster index wallet tx sender
    wrap {
        generate_keypair = \_ -> temp_wallet.generate_keypair wallet,
        execute_tx,
    }

{
    make,
    .. tc
}
